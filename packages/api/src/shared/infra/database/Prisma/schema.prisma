generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Actor {
  id            String @id @default(uuid())
  habboUsername String

  identity Identity?
  roles    Role[]
  actor    DiscordActor?
  players  Player[]
  rosters  TeamActor[]
}

model DiscordActor {
  discordId String @id @unique
  actorId   String @unique

  actor Actor @relation(fields: [actorId], references: [id], onDelete: Cascade)
}

model Identity {
  id         String   @id @default(uuid())
  username   String   @unique
  password   String?
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  actorId    String   @unique

  actor        Actor         @relation(fields: [actorId], references: [id])
  sessions     Session[]
  verification Verification?
}

model Role {
  id      String @id @default(uuid())
  actorId String

  actor Actor @relation(fields: [actorId], references: [id])
}

model Session {
  id         String   @id @default(uuid())
  identityId String
  userAgent  String
  createdAt  DateTime @default(now())

  identity Identity @relation(fields: [identityId], references: [id])
}

model Verification {
  id         String   @id @default(uuid())
  code       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  identityId String   @unique

  identity Identity @relation(fields: [identityId], references: [id])
}

model Season {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  isCurrent Boolean @default(false)

  players Player[]
  matches Match[]
  rosters Team[]
}

model NBAPlayer {
  id        String @id @unique
  firstName String
  lastName  String

  players Player[]
}

model Position {
  id   String @id @unique
  name String @unique

  players Player[]
}

enum ApprovalStatus {
  IDLE
  ACCEPTED
  DENIED
}

model Player {
  id          String         @id @unique @default(uuid())
  actorId     String
  seasonId    Int
  nbaPlayerId String
  positionId  String
  status      ApprovalStatus @default(IDLE)

  actor              Actor         @relation(fields: [actorId], references: [id])
  season             Season        @relation(fields: [seasonId], references: [id])
  nbaPlayer          NBAPlayer     @relation(fields: [nbaPlayerId], references: [id])
  position           Position      @relation(fields: [positionId], references: [id])
  matchStats         MatchStats[]
  icons              PlayerIcon[]
  playerOfTheMatches MatchResult[]

  @@unique([actorId, seasonId, nbaPlayerId])
}

model Icon {
  id   String @id @unique
  name String @unique

  playerIcons PlayerIcon[]
}

model PlayerIcon {
  playerId String
  iconId   String

  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  icon   Icon   @relation(fields: [iconId], references: [id])

  @@id([playerId, iconId])
  @@unique([playerId, iconId])
}

enum Conference {
  EAST
  WEST
}

model NBATeam {
  id         String     @id @unique
  name       String     @unique
  conference Conference
  tricode    String     @unique @db.VarChar(3)
  nickname   String

  seasonTeams Team[]
}

model Team {
  id             String         @id @unique @default(uuid())
  nbaTeamId      String
  seasonId       Int
  approvalStatus ApprovalStatus @default(IDLE)

  nbaTeam     NBATeam      @relation(fields: [nbaTeamId], references: [id])
  season      Season       @relation(fields: [seasonId], references: [id])
  roster      TeamActor[]
  homeMatches Match[]      @relation(name: "homeMatches")
  awayMatches Match[]      @relation(name: "awayMatches")

  @@unique([nbaTeamId, seasonId])
}

enum TeamRole {
  CAPTAIN
  CO_CAPTAIN
  PLAYER
}

model TeamActor {
  teamId  String
  actorId String
  role    TeamRole @default(PLAYER)

  team  Team  @relation(fields: [teamId], references: [id])
  actor Actor @relation(fields: [actorId], references: [id])

  @@id([teamId, actorId])
  @@unique([teamId, actorId])
}

enum MatchKind {
  REGULAR
  PLAYOFF
  FINAL
  ALLSTAR
}

model Match {
  id            String    @id @unique @default(uuid())
  seasonId      Int
  homeTeamId    String
  awayTeamId    String
  scheduledTo   DateTime?
  matchKind     MatchKind
  matchSeriesId String?

  season   Season       @relation(fields: [seasonId], references: [id])
  homeTeam Team         @relation(fields: [homeTeamId], references: [id], name: "homeMatches")
  awayTeam Team         @relation(fields: [awayTeamId], references: [id], name: "awayMatches")
  stats    MatchStats[]
  result   MatchResult?
  series   MatchSeries? @relation(fields: [matchSeriesId], references: [id])
}

model MatchResult {
  matchId            String   @id @unique
  homeScore          Int
  awayScore          Int
  isWalkover         Boolean  @default(false)
  releasedAt         DateTime
  playerOfTheMatchId String

  match            Match  @relation(fields: [matchId], references: [id])
  playerOfTheMatch Player @relation(fields: [playerOfTheMatchId], references: [id])
}

model MatchStats {
  matchId   String
  playerId  String
  points    Int    @default(0) @db.SmallInt
  assists   Int    @default(0) @db.SmallInt
  steals    Int    @default(0) @db.SmallInt
  rebounds  Int    @default(0) @db.SmallInt
  blocks    Int    @default(0) @db.SmallInt
  turnovers Int    @default(0) @db.SmallInt
  fouls     Int    @default(0) @db.SmallInt

  match  Match  @relation(fields: [matchId], references: [id])
  player Player @relation(fields: [playerId], references: [id])

  @@id([matchId, playerId])
  @@unique([matchId, playerId])
}

model MatchSeries {
  id   String @id @unique @default(uuid())
  name String

  matches Match[]
}

enum DiscordChannelCategory {
  STANDINGS
  SCHEDULE
}

model DiscordChannel {
  category  DiscordChannelCategory @id @unique
  discordId String
  name      String
}

enum DiscordRoleCategory {
  MOD
  CAPTAIN
  COUNCIL
  PORTUGUESE
}

model DiscordRole {
  category  DiscordRoleCategory @id @unique
  discordId String
  name      String
}
