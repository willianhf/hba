// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  username   String   @unique
  password   String
  isVerified Boolean  @default(false)
  isAdmin    Boolean  @default(false)
  createdAt  DateTime @default(now())

  sessions     Session[]
  verification Verification?
  userSeasons  UserSeason[]
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  userAgent String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Verification {
  id        String   @id @default(uuid())
  code      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique

  user User @relation(fields: [userId], references: [id])
}

model Season {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  isCurrent Boolean @default(false)

  userSeasons UserSeason[]
  games       Game[]
  rosters     TeamRoster[]
}

model NBAPlayer {
  id        String @id @unique
  firstName String
  lastName  String

  userSeasons UserSeason[]
}

model Position {
  id          String @id @unique
  name        String @unique

  userSeasons UserSeason[]
}

enum ApprovalStatus {
  IDLE
  ACCEPTED
  DENIED
}

model UserSeason {
  id          String         @id @unique @default(uuid())
  userId      String
  seasonId    Int
  nbaPlayerId String
  positionId  String
  status      ApprovalStatus @default(IDLE)

  user             User              @relation(fields: [userId], references: [id])
  season           Season            @relation(fields: [seasonId], references: [id])
  nbaPlayer        NBAPlayer         @relation(fields: [nbaPlayerId], references: [id])
  position         Position          @relation(fields: [positionId], references: [id])
  roster           TeamRoster?
  gameStats        GameStats[]
  icons            UserSeasonIcons[]
  playerOfTheGames GameResult[]

  @@unique([userId, seasonId, nbaPlayerId])
}

model Icon {
  id          String @id @unique
  name        String @unique

  userSeasonIcons UserSeasonIcons[]
}

model UserSeasonIcons {
  userSeasonId String
  iconId       String

  userSeason UserSeason @relation(fields: [userSeasonId], references: [id])
  icon       Icon       @relation(fields: [iconId], references: [id])

  @@id([userSeasonId, iconId])
  @@unique([userSeasonId, iconId])
}

enum Conference {
  EAST
  WEST
}

model NBATeam {
  id         String     @id @unique
  name       String     @unique
  conference Conference
  tricode    String     @unique @db.VarChar(3)
  nickname   String

  seasonRosters TeamRoster[]
  homeGames     Game[]       @relation(name: "homeGames")
  awayGames     Game[]       @relation(name: "awayGames")
}

model TeamRoster {
  nbaTeamId    String
  seasonId     Int
  userSeasonId String  @unique
  isCaptain    Boolean @default(false)

  nbaTeam    NBATeam    @relation(fields: [nbaTeamId], references: [id])
  season     Season     @relation(fields: [seasonId], references: [id])
  userSeason UserSeason @relation(fields: [userSeasonId], references: [id])

  @@id([nbaTeamId, seasonId, userSeasonId])
  @@unique([nbaTeamId, seasonId, userSeasonId])
}

enum GameKind {
  REGULAR
  PLAYOFF
  FINAL
  ALLSTAR
}

model Game {
  id            String    @id @unique @default(uuid())
  seasonId      Int
  homeNBATeamId String
  awayNBATeamId String
  scheduledTo   DateTime?
  gameKind      GameKind
  gameSerieId   String?

  season      Season      @relation(fields: [seasonId], references: [id])
  homeNBATeam NBATeam     @relation(fields: [homeNBATeamId], references: [id], name: "homeGames")
  awayNBATeam NBATeam     @relation(fields: [awayNBATeamId], references: [id], name: "awayGames")
  stats       GameStats[]
  result      GameResult?
  serie       GameSerie?  @relation(fields: [gameSerieId], references: [id])
}

model GameResult {
  gameId            String   @id @unique
  homeScore         Int
  awayScore         Int
  isWalkover        Boolean  @default(false)
  releasedAt        DateTime
  playerOfTheGameId String

  game            Game       @relation(fields: [gameId], references: [id])
  playerOfTheGame UserSeason @relation(fields: [playerOfTheGameId], references: [id])
}

model GameStats {
  gameId       String
  userSeasonId String
  points       Int    @default(0) @db.SmallInt
  assists      Int    @default(0) @db.SmallInt
  steals       Int    @default(0) @db.SmallInt
  rebounds     Int    @default(0) @db.SmallInt
  blocks       Int    @default(0) @db.SmallInt
  turnovers    Int    @default(0) @db.SmallInt
  fouls        Int    @default(0) @db.SmallInt

  game Game       @relation(fields: [gameId], references: [id])
  user UserSeason @relation(fields: [userSeasonId], references: [id])

  @@id([gameId, userSeasonId])
  @@unique([gameId, userSeasonId])
}

model GameSerie {
  id   String @id
  name String

  games Game[]
}
