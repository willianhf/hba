type ApplicationError implements BaseError {
  code: String!
  message: String!
  name: String!
}

input ApplyTeamInput {
  clientMutationId: ID
  coCaptainUserId: ID!
  nbaTeamId: ID!
}

type ApplyTeamPayload {
  clientMutationId: ID
  team: Team!
}

enum ApprovalStatus {
  ACCEPTED
  DENIED
  IDLE
}

type AuthenticationError implements BaseError {
  code: String!
  message: String!
  name: String!
}

interface BaseError {
  code: String!
  message: String!
  name: String!
}

enum Conference {
  EAST
  WEST
}

input ConfirmUserVerificationInput {
  clientMutationId: ID
}

type ConfirmUserVerificationPayload {
  clientMutationId: ID
  itWorked: Boolean!
  user: User!
}

input CreateMatchInput {
  awayTeamId: ID!
  clientMutationId: ID
  homeTeamId: ID!
  matchKind: MatchKind!
  matchSeriesId: ID
  scheduledTo: Date
}

type CreateMatchPayload {
  clientMutationId: ID
  match: Match!
}

input CreatePlayerInput {
  clientMutationId: ID
  iconsIds: [String!]!
  nbaPlayerId: String!
  positionId: String!
}

type CreatePlayerPayload {
  clientMutationId: ID
  player: Player!
}

input CreateSeasonInput {
  clientMutationId: ID
  isCurrent: Boolean!
  name: String!
}

type CreateSeasonPayload {
  clientMutationId: ID
  season: Season!
}

input CreateUserInput {
  clientMutationId: ID
  habboUsername: String!
  password: String!
  username: String!
}

type CreateUserPayload {
  clientMutationId: ID
  session: Session!
  token: String!
  user: User!
  verification: Verification!
}

input CreateUserVerificationInput {
  clientMutationId: ID
}

type CreateUserVerificationPayload {
  clientMutationId: ID
  verification: Verification!
}

scalar Date

type ErrorField {
  field: String
  message: String!
}

type ForbiddenError implements BaseError {
  code: String!
  message: String!
  name: String!
}

type Icon implements Node {
  id: ID!
  name: String!
}

enum ImageSize {
  Large
  Small
}

input LoginInput {
  clientMutationId: ID
  password: String!
  username: String!
}

type LoginPayload {
  clientMutationId: ID
  session: Session!
  token: String!
  user: User!
  verification: Verification
}

input LogoutInput {
  clientMutationId: ID
  sessionId: String!
}

type LogoutPayload {
  clientMutationId: ID
  itWorked: Boolean!
}

input MakeSeasonCurrentInput {
  clientMutationId: ID
  seasonId: ID!
}

type MakeSeasonCurrentPayload {
  clientMutationId: ID
  itWorked: Boolean!
}

type Match implements Node {
  awayTeam: Team!
  homeTeam: Team!
  id: ID!
  kind: MatchKind!
  scheduledTo: Date
  season: Season!
  series: MatchSeries
}

enum MatchKind {
  ALLSTAR
  FINAL
  PLAYOFF
  REGULAR
}

type MatchSeries implements Node {
  id: ID!
  name: String!
}

type Mutation {
  applyTeam(input: ApplyTeamInput!): MutationApplyTeamResult!
  confirmUserVerification(input: ConfirmUserVerificationInput!): MutationConfirmUserVerificationResult!
  createMatch(input: CreateMatchInput!): MutationCreateMatchResult!
  createPlayer(input: CreatePlayerInput!): MutationCreatePlayerResult!
  createSeason(input: CreateSeasonInput!): CreateSeasonPayload!
  createUser(input: CreateUserInput!): MutationCreateUserResult!
  createUserVerification(input: CreateUserVerificationInput!): CreateUserVerificationPayload!
  login(input: LoginInput!): MutationLoginResult!
  logout(input: LogoutInput!): MutationLogoutResult!
  makeSeasonCurrent(input: MakeSeasonCurrentInput!): MakeSeasonCurrentPayload!
}

union MutationApplyTeamResult = ApplicationError | ApplyTeamPayload | AuthenticationError | ValidationError | ValidationInputError

union MutationConfirmUserVerificationResult = ApplicationError | AuthenticationError | ConfirmUserVerificationPayload

union MutationCreateMatchResult = CreateMatchPayload | ForbiddenError | ValidationInputError

union MutationCreatePlayerResult = ApplicationError | AuthenticationError | CreatePlayerPayload | ValidationInputError

union MutationCreateUserResult = CreateUserPayload | ValidationInputError

union MutationLoginResult = ApplicationError | LoginPayload

union MutationLogoutResult = ApplicationError | AuthenticationError | LogoutPayload

type NBAPlayer implements Node {
  firstName: String!
  id: ID!
  imageUrl(size: ImageSize = Large): String!
  lastName: String!
}

type NBATeam implements Node {
  conference: Conference!
  id: ID!
  imageUrl: String!
  isAvailable: Boolean!
  name: String!
  nickname: String!
  tricode: String!
}

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Player implements Node {
  icons: [Icon!]!
  id: ID!
  nbaPlayer: NBAPlayer
  position: Position
  season: Season
  status: ApprovalStatus!
  user: User
}

type Position implements Node {
  id: ID!
  name: String!
}

type Query {
  currentSeason: Season!
  findPlayers(seasonId: String!): [Player!]!
  findUser(username: String!): QueryFindUserResult
  findUserPlayersBySeason(after: String, before: String, first: Int, last: Int): QueryFindUserPlayersBySeasonConnection!
  icons: [Icon!]!
  matchKinds: [MatchKind!]!
  matches(seasonId: ID): [Match!]!
  nbaPlayers(search: String!): [NBAPlayer!]!
  nbaTeams: [NBATeam!]!
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  positions: [Position!]!
  searchUsers(search: String!): QuerySearchUsersResult!
  seasons(after: String, before: String, first: Int, last: Int): QuerySeasonsConnection!
  teams(seasonId: ID): [Team!]!
  user: User
}

type QueryFindUserPlayersBySeasonConnection {
  edges: [QueryFindUserPlayersBySeasonConnectionEdge!]!
  pageInfo: PageInfo!
}

type QueryFindUserPlayersBySeasonConnectionEdge {
  cursor: String!
  node: Player!
}

union QueryFindUserResult = User

union QuerySearchUsersResult = AuthenticationError | QuerySearchUsersSuccess

type QuerySearchUsersSuccess {
  data: [User!]!
}

type QuerySeasonsConnection {
  edges: [QuerySeasonsConnectionEdge!]!
  pageInfo: PageInfo!
}

type QuerySeasonsConnectionEdge {
  cursor: String!
  node: Season!
}

type Season implements Node {
  id: ID!
  name: String!
}

type Session {
  createdAt: Date!
  id: String!
  user: User!
  userAgent: String!
}

type Team implements Node {
  id: ID!
  managers: [TeamRoster!]!
  nbaTeam: NBATeam!
  roster: [TeamRoster!]!
  status: ApprovalStatus!
}

type TeamRoster implements Node {
  id: ID!
  role: TeamRosterRole!
  team: Team!
  user: User!
}

enum TeamRosterRole {
  CAPTAIN
  CO_CAPTAIN
  PLAYER
}

type User implements Node {
  activePlayer(seasonId: ID): Player
  canApplyTeam: Boolean!
  canRequestPlayer: Boolean!
  createdAt: Date
  id: ID!
  isAdmin: Boolean!
  isVerified: Boolean!
  players(after: String, before: String, first: Int, last: Int): UserPlayersConnection!
  username: String!
}

type UserPlayersConnection {
  edges: [UserPlayersConnectionEdge!]!
  pageInfo: PageInfo!
}

type UserPlayersConnectionEdge {
  cursor: String!
  node: Player!
}

type ValidationError implements BaseError {
  code: String!
  message: String!
  name: String!
}

type ValidationInputError implements BaseError {
  code: String!
  fields: [ErrorField!]!
  message: String!
  name: String!
}

type Verification implements Node {
  code: VerificationCode!
  createdAt: Date!
  id: ID!
  updatedAt: Date!
  user: User!
}

type VerificationCode {
  expiresAt: Date!
  value: String!
}
